#!/bin/bash

# POSSIBLE_INDEX_LOCATIONS=("$( cd "$(dirname "$0")" ; pwd -P )")
# if command -v basher; then
#     echo bb
#     POSSIBLE_INDEX_LOCATIONS+=("$(basher package-path forbesmyester/pernote)")
#     echo bob
# fi

# for PP in "${POSSIBLE_INDEX_LOCATIONS[@]}";do
#     echo ">> $PP"
# done

set -euo pipefail
IFS=$'\n\t'

show_help() {
    echo "$0 Interact with personal wiki files"
    echo ""
    echo "Usage:"
    echo ""
    echo "  $0 WIKI_NAME ACTION OPTION"
    echo ""
    echo "Examples:"
    echo ""
    echo "  $0 WIKI_NAME new/n - Create an entry"
    echo "  $0 WIKI_NAME filename/f - Search for filename"
    echo "  $0 WIKI_NAME date/d [DATE_STR] - Open note for a day"
    echo "  $0 WIKI_NAME content/c - Search for content"
    echo "  $0 WIKI_NAME buildindex/b - Build index"
    echo "  $0 WIKI_NAME searchindex/s - Search the index"
    echo "  $0 WIKI_NAME git/g - Interact with git"
    echo "  $0 WIKI_NAME remotesync/r - Synchronize with GIT repository"
    echo "  $0 WIKI_NAME installdeps/i - Install dependencies"
    echo ""
}

function get_wiki_path {
    local OPTS

    if [ ! -f "$HOME/.pernote" ]; then
        echo "ERROR: No config file found." 1>&2
        echo "" 1>&2
        echo "Please run 'echo \"personal:/home/$USER/Documents/Personal Wiki\" > ~/.pernote'" 1>&2
        exit 1
    fi

    if ! OPTS="$(grep "^$1" "$HOME/.pernote" | sed 's/^[^:]\+://')"; then
        echo "Error: Input '${1}' resolves to no wikis" 1>&2
        exit 1
    fi
    if [ "$(echo "$OPTS" | wc -l)" -gt 1 ]; then
        echo "Error: Input '${1}' resolves to multiple wikis" 1>&2
        exit 1
    fi
    echo "$OPTS"
}

function search_date {
    local DIRECTORY
    local DATE

    DIRECTORY=$1

    DATE=$(date -I)
    if [ $# -gt 1 ]; then
        if ! DATE="$(date -I -d "$2" 2>/dev/null)"; then
            echo "Invalid date '${2}'" 1>&2
            exit 1
        fi
        echo "${DATE}.md"
        return 0
    fi

    if ! DATE=$(\
        find "$DIRECTORY" -type f -name "*.md"  -printf '%P\n' | \
        grep "^diary/" | \
        sed 's/\.md$//' | \
        grep -v "^diary/${DATE}$" | \
        sort -r |
        sed "1 idiary/$DATE" | \
        sed '$a<NEW>' | \
        run_fzf "${@:2}" \
    ); then
        exit 1
    fi

    if [[ "$DATE" == '<NEW>' ]]; then
        echo "$DATE"
        return 0
    fi

    echo "${DATE}.md"

}

function run_fzf {
    if [ "$#" -gt 0 ]; then
        fzf --ansi -q "$1"
    else
        fzf --ansi
    fi
}

function search_filename {
    local DIRECTORY
    local NAME
    local DATE

    DIRECTORY=$1
    DATE=$(date -I)
    if ! NAME=$(\
        find "$DIRECTORY" -type f -name "*.md"  -printf '%P\n' | \
        sed 's/\.md$//' | \
        grep -v "^diary/${DATE}$" | \
        sort |
        sed "1 idiary/$DATE" | \
        sed '$a<NEW>' | \
        run_fzf "${@:2}" \
    ); then
        exit 1
    fi
    if [[ "$NAME" == '<NEW>' ]]; then
        echo "$NAME"
        return 0
    fi
    echo "${NAME}.md"
}

function search_searchindex {
    local FOUND
    local TYPE
    local TARGET
    local WIDTH
    local SOURCE

    FOUND=$(fzf --ansi -q "${@:2}" < "$1/.pernote-index")
    if [ ${#FOUND} -eq 0 ]; then
        echo ""
        return
    fi
    TYPE=$(echo "$FOUND" | sed 's/:.*//' | sed 's/ *$//')
    TARGET=$(echo "$FOUND" | sed 's/.*:: *//' | sed 's/ *$//')
    SOURCE=$(echo "$FOUND" | sed 's/^[a-z_]\+ *:\+ *//' | sed 's/:.*//' | sed 's/ *$//')
    if [ "$TYPE" == "head" ] || [ "$TYPE" == "bad_link" ]; then
        echo "${SOURCE}.md"
        return
    fi
    WIDTH=$(tput cols)
    WIDTH=$((WIDTH-10))
    SELECTION=$(whiptail --title "Which do you want to open?" --notags --fb --menu --nocancel "Open source or target?"  15 "$WIDTH" 3 "s" "Source: $SOURCE" "t" "Target: $TARGET" 3>&1 1>&2 2>&3)
    FOUND="${SOURCE}.md"
    if [ "$SELECTION" == 't' ]; then
        FOUND="$TARGET"
    fi
    echo "$FOUND"
}

function search_content {
    local OUT
    # --color=always --line-number 
    if ! OUT="$(cd "$1" && rg --no-line-number --column --no-heading --type markdown . | sed 's/^\([^:]\+\)\.md:1:/\1: /' | run_fzf "${@:2}")"; then
        exit 1
    fi
    echo "${OUT//\:*/}.md"
}

function run_git {
    cd "$1"
    git "${@:2}"
}

function action_match {
    local -n CONFIG="$1"
    local INPUT="$2"
    local -n RESULT=$3
    MATCH_COUNT=1
    while [ $MATCH_COUNT -gt 0 ]; do
        MATCH_COUNT=0
        for ACT in "${CONFIG[@]}"; do
            RE="^$ACT\-?(.*)"
            if [[ "$INPUT" =~ $RE ]]; then 
                MATCH_COUNT=$(( MATCH_COUNT + 1 ))
                RESULT+=("$ACT")
                INPUT="${BASH_REMATCH[1]}"
            fi
            RE="^${ACT:0:1}\-?(.*)"
            if [[ "$INPUT" =~ $RE ]]; then 
                MATCH_COUNT=$(( MATCH_COUNT + 1 ))
                RESULT+=("$ACT")
                INPUT="${BASH_REMATCH[1]}"
            fi
        done
    done
}


function execute_find {
    local ACTION=$1
    local WIKI="$2"
    if ! RET="$("search_$ACTION" "$WIKI" "${@:3}")"; then
        echo "Could not get document"
        exit 1
    fi
    echo "$RET"
}

if [ $# -lt 2 ]; then
    show_help
    exit 1
fi

# shellcheck disable=SC2034  # Not Unused - BASH pass by name
ACTION_CONFIG=("new" "filename" "date" "content" "buildindex" "searchindex"
    "git" "remotesync" "help" "installdeps")

declare -a ACTIONS
action_match ACTION_CONFIG "$2" ACTIONS

if [ ${#ACTIONS[@]} -eq 0 ]; then
    exit 1
fi

WIKI=$(get_wiki_path "$1");

for ACTION in "${ACTIONS[@]}"; do

    if [ "$ACTION" == "help" ]; then
        show_help
        continue
    fi

    if [ "$ACTION" == "git" ]; then
        run_git "$WIKI" "${@:3}"
        continue
    fi

    if [ "$ACTION" == "installdeps" ]; then
        if ! OPTS="$(which pernote-index)"; then
            npm install -g pernote-index
        fi
        continue
    fi

    if [ "$ACTION" == "buildindex" ]; then
        pernote-index -r "$WIKI" > "${WIKI}/.pernote-index"
        continue
    fi

    if [ "$ACTION" == "remotesync" ]; then
        echo git -C "$WIKI" add .
        git -C "$WIKI" add .
        echo git -C "$WIKI" commit -m 'commit'
        git -C "$WIKI" commit -m 'commit' || true
        echo git -C "$WIKI" pull
        git -C "$WIKI" pull --no-edit || true
        echo git -C "$WIKI" push
        git -C "$WIKI" push || true
        continue
    fi

    FOUND=""
    if [ "$ACTION" == "date" ] || [ "$ACTION" == "searchindex" ] || [ "$ACTION" == "filename" ] || [ "$ACTION" == "content" ]; then
        if ! FOUND=$(execute_find "$ACTION" "$WIKI" "${@:3}"); then
            echo "Could not get document"
            exit 1
        fi
    fi
    if [ "$ACTION" == "new" ]; then
        read -r -p "Please enter new name: " FOUND
        if [ ${#FOUND} -gt 0 ]; then
            FOUND="${FOUND}.md"
        fi
    fi

    if [ ${#FOUND} -eq 0 ]; then
        echo "Was expecting a document name but found nothing"
        exit 1
    fi

    WEBSITE_RE='^https?\:\/\/'
    if [[ "$FOUND" =~ $WEBSITE_RE ]]; then
        xdg-open "$FOUND"
        exit 0
    fi
    mkdir -p "$WIKI/$(dirname "$FOUND")"
    cd "${WIKI}"
    $EDITOR "${FOUND}"
done
